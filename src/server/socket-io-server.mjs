// socket-io-server.mjs
// Socket.IO„Çµ„Éº„Éê„ÉºÔºàÁµ±‰∏ÄË®≠ÂÆöÂØæÂøú„Éª„Éù„Éº„ÉàÁ´∂ÂêàËß£Ê±∫ÁâàÔºâ
import { createServer } from 'http';
import { Server } from 'socket.io';
import { URL } from 'url';

// üîß Áµ±‰∏ÄË®≠ÂÆö„Åã„Çâ„Éù„Éº„ÉàË™≠„ÅøËæº„Åø
const SOCKETIO_PORT = parseInt(process.env.SOCKETIO_PORT || '8080');
const CORS_ORIGINS = [
  "http://localhost:3000", 
  "http://localhost:3001", 
  "http://localhost:3002", 
  "http://localhost:3003"
];

// HTTP„Çµ„Éº„Éê„Éº‰ΩúÊàê
const httpServer = createServer((req, res) => {
  // CORSÂØæÂøú
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }
  
  // UIÊìç‰Ωú„ÅÆHTTP„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
  if (req.method === 'POST' && req.url === '/ui-operation') {
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      try {
        const operation = JSON.parse(body);
        console.log('üì° HTTPÁµåÁî±„ÅßUIÊìç‰ΩúÂèó‰ø°:', operation);
        
        // Socket.IO„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Å´„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà
        io.emit('ui_operation_from_api', {
          ...operation,
          timestamp: new Date().toISOString(),
          source: 'http_api'
        });
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: true,
          message: 'UIÊìç‰Ωú„ÇíSocket.IO„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Å´„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà„Åó„Åæ„Åó„Åü',
          operation: operation.description
        }));
        
      } catch (error) {
        console.log('‚ö†Ô∏è UIÊìç‰ΩúHTTPÂá¶ÁêÜ„Ç®„É©„Éº:', error);
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
          success: false,
          error: 'JSONËß£Êûê„Ç®„É©„Éº'
        }));
      }
    });
    
    return;
  }
  
  // „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
  if (req.method === 'GET' && req.url === '/health') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      clients: clients.size,
      port: SOCKETIO_PORT,
      uptime: process.uptime()
    }));
    return;
  }
  
  // ‰ªñ„ÅÆHTTP„É™„ÇØ„Ç®„Çπ„Éà„ÅØ404
  res.writeHead(404, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({ error: 'Not Found' }));
});

// Socket.IO„Çµ„Éº„Éê„ÉºË®≠ÂÆö
const io = new Server(httpServer, {
  cors: {
    origin: CORS_ORIGINS,
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['polling', 'websocket'],
  // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ
  pingTimeout: 30000,
  pingInterval: 25000,
  upgradeTimeout: 10000,
  maxHttpBufferSize: 1e6 // 1MB
});

console.log(`üöÄ Socket.IO„Çµ„Éº„Éê„ÉºËµ∑Âãï‰∏≠... („Éù„Éº„Éà: ${SOCKETIO_PORT})`);

// „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÁÆ°ÁêÜÔºà„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ‰ªò„ÅçÔºâ
const clients = new Set();
const connectionMetrics = {
  totalConnections: 0,
  currentConnections: 0,
  messagesProcessed: 0,
  errors: 0
};

io.on('connection', (socket) => {
  connectionMetrics.totalConnections++;
  connectionMetrics.currentConnections++;
  
  console.log(`üîó Socket.IO„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÊé•Á∂ö: ${socket.id} (ÁèæÂú®: ${connectionMetrics.currentConnections})`);
  clients.add(socket);
  
  // Êé•Á∂öÁ¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏
  socket.emit('connection_established', {
    message: 'Socket.IO„Çµ„Éº„Éê„Éº„Å´Ê≠£Â∏∏Êé•Á∂ö',
    serverId: socket.id,
    timestamp: new Date().toISOString(),
    serverInfo: {
      port: SOCKETIO_PORT,
      clientCount: clients.size
    }
  });
  
  // WebSocket UIÊìç‰Ωú„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Éè„É≥„Éâ„É™„É≥„Ç∞
  socket.on('ui_operation', (data) => {
    try {
      connectionMetrics.messagesProcessed++;
      console.log('üéØ UIÊìç‰ΩúÂèó‰ø°:', data);
      
      // ‰ªñ„ÅÆ„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Å´„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà
      socket.broadcast.emit('ui_operation_broadcast', {
        ...data,
        fromClient: socket.id,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      connectionMetrics.errors++;
      console.error('‚ùå UIÊìç‰ΩúÂá¶ÁêÜ„Ç®„É©„Éº:', error);
    }
  });
  
  // Ê±éÁî®„É°„ÉÉ„Çª„Éº„Ç∏„Éè„É≥„Éâ„É™„É≥„Ç∞
  socket.on('message', (data) => {
    try {
      connectionMetrics.messagesProcessed++;
      console.log(`üí¨ „É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø° from ${socket.id}:`, data);
      
      // „Ç®„Ç≥„Éº„Éê„ÉÉ„ÇØ
      socket.emit('message_response', {
        original: data,
        response: `Socket.IO„Çµ„Éº„Éê„Éº„ÅåÂèó‰ø°: ${JSON.stringify(data)}`,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      connectionMetrics.errors++;
      console.error('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ„Ç®„É©„Éº:', error);
    }
  });
  
  // ÂàáÊñ≠ÊôÇ„ÅÆÂá¶ÁêÜ
  socket.on('disconnect', (reason) => {
    connectionMetrics.currentConnections--;
    console.log(`‚ùå Socket.IO„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàáÊñ≠: ${socket.id} (ÁêÜÁî±: ${reason}) (ÁèæÂú®: ${connectionMetrics.currentConnections})`);
    clients.delete(socket);
  });
  
  // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
  socket.on('error', (error) => {
    connectionMetrics.errors++;
    console.log(`‚ö†Ô∏è Socket.IO„Ç®„É©„Éº (${socket.id}):`, error);
  });
});

// HTTP„Çµ„Éº„Éê„ÉºËµ∑ÂãïÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑ÂåñÔºâ
httpServer.listen(SOCKETIO_PORT, '127.0.0.1')
  .on('listening', () => {
    console.log(`‚úÖ Socket.IO„Çµ„Éº„Éê„ÉºËµ∑ÂãïÂÆå‰∫Ü: http://127.0.0.1:${SOCKETIO_PORT}`);
    console.log(`üì° WebSocket & PollingÂØæÂøúÊ∏à„Åø`);
    console.log(`üîå HTTP UIÊìç‰Ωú„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà: POST /ui-operation`);
    console.log(`üíö „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ: GET /health`);
  })
  .on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
      console.error(`‚ùå „Éù„Éº„Éà ${SOCKETIO_PORT} „ÅØÊó¢„Å´‰ΩøÁî®‰∏≠„Åß„Åô`);
      console.log(`üí° Âà•„ÅÆ„Éù„Éº„Éà„ÇíË©¶„Åô„Åã„ÄÅÊó¢Â≠ò„ÅÆ„Éó„É≠„Çª„Çπ„ÇíÂÅúÊ≠¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ:`);
      console.log(`   lsof -ti:${SOCKETIO_PORT} | xargs kill -9`);
    } else {
      console.error('‚ùå Socket.IO„Çµ„Éº„Éê„ÉºËµ∑Âãï„Ç®„É©„Éº:', error);
    }
    process.exit(1);
  });

// „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñÔºà5ÂàÜÈñìÈöîÔºâ
setInterval(() => {
  console.log('üìä Socket.IO„Çµ„Éº„Éê„Éº„É°„Éà„É™„ÇØ„Çπ:', {
    ...connectionMetrics,
    uptime: Math.floor(process.uptime()),
    memoryUsage: process.memoryUsage()
  });
}, 5 * 60 * 1000);

// „Ç∞„É≠„Éº„Éê„É´„Å™UIÊìç‰Ωú„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„ÉàÈñ¢Êï∞ÔºàAPIÁµåÁî±„ÅßÂëº„Å≥Âá∫„ÅóÂèØËÉΩÔºâ
globalThis.broadcastUIOperation = (operation) => {
  console.log('üì¢ UIÊìç‰Ωú„Ç∞„É≠„Éº„Éê„É´„Éñ„É≠„Éº„Éâ„Ç≠„É£„Çπ„Éà:', operation);
  io.emit('ui_operation_global', {
    ...operation,
    timestamp: new Date().toISOString(),
    source: 'server_api'
  });
};

// „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
process.on('SIGINT', () => {
  console.log('\nüõë Socket.IO„Çµ„Éº„Éê„ÉºÁµÇ‰∫Ü‰∏≠...');
  console.log('üìä ÊúÄÁµÇ„É°„Éà„É™„ÇØ„Çπ:', connectionMetrics);
  
  io.close(() => {
    httpServer.close(() => {
      console.log('‚úÖ Socket.IO„Çµ„Éº„Éê„ÉºÊ≠£Â∏∏ÁµÇ‰∫Ü');
      process.exit(0);
    });
  });
});

export { io }; 